import "reflect-metadata";

import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

import { Providers } from "./providers";
import { cache } from "react";
import { cookies } from "next/headers";
import { Session, User } from "lucia";
import { lucia } from "@/lib/lucia/lucia";
import Nav from "./components/Navbar";
import {
  GetUserResponseDto,
  GetUserResponseDtoSchema,
} from "@/lib/dtos/users/get/get-user-response-dto";
import { container } from "./inversify.config";
import { UserFinder } from "./api/contexts/auth/users/application/user-finder/user-finder";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "AstrOn",
  description: "Generated by create next app",
};

export const validateRequest = cache(
  async (): Promise<
    { user: User; session: Session } | { user: null; session: null }
  > => {
    const sessionId = cookies().get(lucia.sessionCookieName)?.value ?? null;
    if (!sessionId) {
      return {
        user: null,
        session: null,
      };
    }

    const result = await lucia.validateSession(sessionId);
    try {
      if (result.session && result.session.fresh) {
        const sessionCookie = lucia.createSessionCookie(result.session.id);
        cookies().set(
          sessionCookie.name,
          sessionCookie.value,
          sessionCookie.attributes
        );
      }
      if (!result.session) {
        const sessionCookie = lucia.createBlankSessionCookie();
        cookies().set(
          sessionCookie.name,
          sessionCookie.value,
          sessionCookie.attributes
        );
      }
    } catch {}
    return result;
  }
);

export const getUser = async (userId: string): Promise<GetUserResponseDto> => {
  const userFinder = container.get<UserFinder>(UserFinder);
  return await userFinder.execute(userId);
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const result = await validateRequest();
  if (!result.user) return;
  const user = await getUser(result.user.id);
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        style={{ backgroundColor: "#021631" }}
      >
        <Providers>
          <Nav user={user} />
          {children}
        </Providers>
      </body>
    </html>
  );
}
